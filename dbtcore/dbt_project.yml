
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbtcore'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'dbtcore'

vars:
  vdeptno: 20','30
  vdname: SALES MAN
  vloc: 'NEW YORK'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:

 # +pre-hook:
 #   sql: "insert into sf_db.sf_schema.dbt_audits (audit_type) values ('dbt_project level pre hook');commit;" 
 # +post-hook:
 #   sql: "insert into sf_db.sf_schema.dbt_audits (audit_type) values ('dbt_project level post hook ');commit;"

  dbtcore:
  #  materialized: table
    # Config indicated by + and applies to all files under models/example/
    
    example:
      +materialized: table


#on-run-start: "insert into sf_db.sf_schema.dbt_audits (audit_type) values ('dbt_project level on-run_start');commit;"
#on-run-end: "insert into sf_db.sf_schema.dbt_audits (audit_type) values ('dbt_project level on-run_end');commit;"

